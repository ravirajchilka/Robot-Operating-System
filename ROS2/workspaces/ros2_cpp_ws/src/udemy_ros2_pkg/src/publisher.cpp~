#include <memory>
#include <rclcpp/rclcpp.hpp>
#include "std_msgs/msg/string.hpp"
#include <iostream>
#include <string>

class HellWorldPubNode : public rclcpp::Node
{
    public:
        HellWorldPubNode():Node("hello_world_pub_node") 
        {
            Publisher_ = this->create_publisher<std_msgs::msg::String>(
                "helllo world",10        
            )
            timer_ = this->create_wall_timer(std::chrono::seconds(1),std::bind(&HellWorldPubNode::publish_hello_world,this));
        }

    private:

        void publish_hello_world() 
        {
            auto message = std_msgs::msg::String();
            message.data = "Hello world" + std::to_string(counter_);

            Publisher_->Publish(message);
            counter_++;

        }

        rclcpp::Publisher<std_msgs::msg::String>::SharedPtr Publisher;
        rclcpp::TimerBase::SharedPtr timer;
};


int main(int argc, char* argv[]) {
    
    rclcpp::init();
    rclcpp::spin(std::make_shared<HellWorldPubNode>());
    rclcpp::shutdown();

    return 0;
}


